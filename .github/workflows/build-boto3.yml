name: Build and push image on boto3 releases (Alpine base)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  schedule:
    - cron: "0 */6 * * *" # every 6 hours

permissions:
  contents: read
  packages: write

env:
  # Set these as Repository variables (Settings -> Secrets and variables -> Variables)
  REGISTRY: ${{ vars.REGISTRY }}     # e.g., ghcr.io or docker.io
  IMAGE_NAME: ${{ vars.IMAGE_NAME }} # e.g., daveshow/boto3-alpine
  ALPINE_TAG: ${{ vars.ALPINE_TAG }} # e.g., latest (tracks newest Alpine) or 3.20 (pins Python ~3.12)

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get boto3 version from Alpine (fallback to PyPI)
        id: boto3
        run: |
          set -euo pipefail
          python - <<'PY' | tee -a "$GITHUB_OUTPUT"
          import io, tarfile, urllib.request, os, json, sys

          pkg = 'py3-boto3'
          alpine_tag = os.environ.get('ALPINE_TAG', 'latest')

          # Map ALPINE_TAG to Alpine branches used by the mirrors
          if alpine_tag in ('latest', 'edge'):
              branch = 'edge'
          else:
              branch = alpine_tag if alpine_tag.startswith('v') else f'v{alpine_tag}'

          repos = ['main', 'community', 'testing']
          arch = 'x86_64'
          version = None

          for repo in repos:
              url = f'https://dl-cdn.alpinelinux.org/alpine/{branch}/{repo}/{arch}/APKINDEX.tar.gz'
              try:
                  with urllib.request.urlopen(url, timeout=15) as r:
                      data = r.read()
                  tf = tarfile.open(fileobj=io.BytesIO(data), mode='r:gz')
                  member = tf.extractfile('APKINDEX')
                  if not member:
                      continue
                  text = member.read().decode('utf-8', errors='ignore')
                  lines = text.splitlines()
                  for i, line in enumerate(lines):
                      if line.strip() == f'P:{pkg}':
                          # scan forward for the version line
                          for j in range(i+1, min(i+400, len(lines))):
                              if lines[j].startswith('V:'):
                                  version = lines[j][2:].strip()
                                  break
                      if version:
                          break
                  if version:
                      break
              except Exception:
                  # ignore network/parse errors and try next repo
                  continue

          if version:
              print(f"version={version}")
              sys.exit(0)

          # Fallback to PyPI if package/version not found in Alpine
          try:
              data = json.load(urllib.request.urlopen('https://pypi.org/pypi/boto3/json', timeout=15))
              print(f"version={data['info']['version']}")
          except Exception as e:
              print('version=unknown')
              sys.exit(1)
          PY

      - name: Ensure required variables are set
        run: |
          : "${REGISTRY:?Set a repository variable REGISTRY (e.g., ghcr.io or docker.io)}"
          : "${IMAGE_NAME:?Set a repository variable IMAGE_NAME (e.g., daveshow/boto3-alpine)}"
          : "${ALPINE_TAG:?Set a repository variable ALPINE_TAG (e.g., latest or 3.20)}"

      - name: Login to GHCR
        if: env.REGISTRY == 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub or other registry
        if: env.REGISTRY != 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }} # Set as a repository secret
          password: ${{ secrets.DOCKER_TOKEN }}    # Set as a repository secret

      - name: Check if image for this boto3 version already exists
        id: exists
        continue-on-error: true
        run: |
          set -e
          IMAGE="${REGISTRY}/${IMAGE_NAME}:boto3-${{ steps.boto3.outputs.version }}"
          echo "Checking $IMAGE"
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU (for cross-platform emulation)
        if: steps.exists.outputs.exists != 'true'
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: steps.exists.outputs.exists != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push multi-arch image
        if: steps.exists.outputs.exists != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            ALPINE_TAG=${{ env.ALPINE_TAG }}
            BOTO3_VERSION=${{ steps.boto3.outputs.version }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:boto3-${{ steps.boto3.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Summary
        run: |
          echo "Latest boto3: ${{ steps.boto3.outputs.version }}"
          echo "Built/Pushed: ${{ steps.exists.outputs.exists != 'true' }}"